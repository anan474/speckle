{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/speckle.js"],"names":[],"mappings":"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","file":"speckle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/**\r\n * Speckle.js\r\n *\r\n * A JavaScript module that adds responsive, stylized \r\n * speckles to any element; with no dependencies.\r\n *\r\n * @package speckle\r\n * @since   0.0.1\r\n */\r\nclass Speckle {\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The passed element to speckle.\r\n\t * @param  {obj}      options  The options object.\r\n\t * @return {void} \r\n\t */\r\n\tconstructor(element, options) {\r\n\t\t// throw error if `element` is not a valid HTML element.\r\n\t\tif (! element || ! (element instanceof Element)) {\r\n\t\t\tthis.throwElementError();\r\n\t\t}\r\n\t\t// Set the default options.\r\n\t\tthis.defaultOptions = {\r\n\t\t\tquantity: 56, // quantity of speckles\r\n\t\t\tminSize: 4, // smallest speckle (1+, less than `maxSize`, px)\r\n\t\t\tmaxSize: 56, // largest speckle (1+, greater than `minSize`, px)\r\n\t\t\ttbOffset: 8, // top/bottom offset (0+, %)\r\n\t\t\tlrOffset: 8,  // left/right offset (0+, %)\r\n\t\t\tminOpacity: 12.5, // minimum opacity (1-100)\r\n\t\t\tmaxOpacity: 87.5, // maximum opacity (1-100)\r\n\t\t\tisBokeh: false, // bokeh effect (blur as a factor of distance)\r\n\t\t\tcolor: '', // color (hex, rgb, hsl, keyword). If none, the colors will be randomized.\r\n\t\t\tzIndex: 0, // z-index (bokeh: the starting z-index)\r\n\t\t\tisCropped: false, // apply `overflow: hidden;` to the container\r\n\t\t\ttagName: 'I', // the Tag Name that the speckle should be rendered as\r\n\t\t\tattributes: null // attributes object as `key: value` pairs\r\n\t\t};\r\n\t\t// Parse and set options.\r\n\t\tthis.options = this.parseOptions(options, this.defaultOptions);\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity } = this.options;\r\n\t\t// throw error if `minSize` is less than 1, or greater than `maxSize`.\r\n\t\tif ((minSize < 1) || (minSize > maxSize)) {\r\n\t\t\tthis.throwOptionsError('minSize');\r\n\t\t}\r\n\t\t// throw error if `maxSize` is less than 1, or less than `minSize`.\r\n\t\tif ((maxSize < 1) || (maxSize < minSize)) {\r\n\t\t\tthis.throwOptionsError('maxSize');\r\n\t\t}\r\n\t\t// throw error if `tbOffset` is less than 0.\r\n\t\tif (tbOffset < 0) {\r\n\t\t\tthis.throwOptionsError('tbOffset');\r\n\t\t}\r\n\t\t// throw error if `lrOffset` is less than 0.\r\n\t\tif (lrOffset < 0) {\r\n\t\t\tthis.throwOptionsError('lrOffset');\r\n\t\t}\r\n\t\t// throw error if `minOpacity` is less than 0 or greater than 100; or if is greater than `maxOpacity`.\r\n\t\tif ((minOpacity < 0) || (minOpacity > 100) || (minOpacity > maxOpacity)) {\r\n\t\t\tthis.throwOptionsError('minOpacity');\r\n\t\t}\r\n\t\t// throw error if `maxOpacity` is less than 0 or greater than 100; or if is less than `minOpacity`.\r\n\t\tif ((maxOpacity < 0) || (maxOpacity > 100) || (maxOpacity < minOpacity)) {\r\n\t\t\tthis.throwOptionsError('maxOpacity');\r\n\t\t}\r\n\t\t// Set the global styles.\r\n\t\tthis.globalStyles = {\r\n\t\t\tborderRadius: '50%', \r\n\t\t\tdisplay: 'block', \r\n\t\t\tpointerEvents: 'none', \r\n\t\t\tposition: 'absolute', \r\n\t\t};\r\n\t\t// Set the upgraded class.\r\n\t\tthis.upgradedClass = 'speckle--upgraded';\r\n\t\t// Render speckles.\r\n\t\tthis.render(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse the passed options against the defaults.\r\n\t * \r\n\t * @param  {obj}  options         The passed in user options object.\r\n\t * @param  {obj}  defaultOptions  The default options object.\r\n\t * @return {obj}                  The parsed options object.\r\n\t */\r\n\tparseOptions(options, defaultOptions) {\r\n\t\t// if no options are passed, just return the default options.\r\n\t\tif (! options || typeof options !== 'object') {\r\n\t\t\treturn defaultOptions;\r\n\t\t}\r\n\t\t// init empty `parsedOptions` object.\r\n\t\tvar parsedOptions = {};\r\n\t\t// loop default option keys and parse. If the options \r\n\t\t// object has this key, use it; else, use the default option.\r\n\t\tfor (var key in defaultOptions) {\r\n\t\t\tconst value = options[key];\r\n\t\t\t// If the value is a number, set it no matter what.\r\n\t\t\t// This prevents issues where passing `0` is read as \r\n\t\t\t// no option passed, rendering the default instead.\r\n\t\t\tif (typeof value === 'number') {\r\n\t\t\t\tparsedOptions[key] = value;\r\n\t\t\t} else {\r\n\t\t\t\tparsedOptions[key] = value || defaultOptions[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// return the parsed options.\r\n\t\treturn parsedOptions;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowElementError() {\r\n\t\tthrow new Error(\r\n\t\t\t'Speckle.js\\n' + \r\n\t\t\t'A valid HTML Element must be passed to the constructor as the first argument.'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowOptionsError(key) {\r\n\t\tvar message = '';\r\n\t\tif (key === 'minSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and less than `maxSize`.';\r\n\t\t} else if (key === 'maxSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and greater than `minSize`.';\r\n\t\t} else if (key === 'tbOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'lrOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'minOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and less than `maxOpacity`.';\r\n\t\t} else if (key === 'maxOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and greater than `minOpacity`.';\r\n\t\t}\r\n\t\tthrow new Error(\r\n\t\t\t'Speckle.js [' + key + ']\\n' + message\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random integer between a passed minimum and maximum.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {int}  min  The minimum for the returned integer.\r\n\t * @param  {int}  max  The maximum for the returned integer.\r\n\t * @return {int}       The randomized integer.\r\n\t */\r\n\tgetRandomInt(min, max) {\r\n\t\treturn Math.floor(Math.random() * ((max - min) + 1) + min);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random hex color.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {string}  A random hex color.\r\n\t */\r\n\tgetRandomHex() {\r\n\t\treturn '#' + ('000000' + Math.random().toString(16).slice(2, 8)).slice(-6).toUpperCase();\r\n\t}\r\n\r\n\tgetStyles(element) {\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity, color, isBokeh, zIndex } = this.options;\r\n\t\t// size\r\n\t\tconst size = this.getRandomInt(minSize, maxSize);\r\n\t\tconst center = (size / 2);\r\n\t\t// color\r\n\t\tconst renderColor = color || this.getRandomHex();\r\n\t\t// Create the styles object.\r\n\t\treturn Object.assign(this.globalStyles, {\r\n\t\t\tbackgroundColor: renderColor, \r\n\t\t\tboxShadow: isBokeh ? ('0 0 ' + (size / 3) + 'px ' + (size / 3) + 'px ' + renderColor) : '', \r\n\t\t\theight: size + 'px', \r\n\t\t\tleft: 'calc(' + this.getRandomInt(0 - lrOffset, 100 + lrOffset) + '% - ' + center + 'px)', \r\n\t\t\topacity: (this.getRandomInt(minOpacity, maxOpacity) * 0.01), \r\n\t\t\ttop: 'calc(' + this.getRandomInt(0 - tbOffset, 100 + tbOffset) + '% - ' + center + 'px)', \r\n\t\t\twidth: size + 'px', \r\n\t\t\tzIndex: zIndex, \r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Render the speckles.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The container element to speckle.\r\n\t * @return {void} \r\n\t */\r\n\trender(element) {\r\n\t\tconst { quantity, isCropped, tagName, attributes } = this.options;\r\n\t\tconst { position } = window.getComputedStyle(element);\r\n\t\t// add the upgraded class.\r\n\t\telement.classList.add(this.upgradedClass);\r\n\t\t// add relative positioning to the element if it \r\n\t\t// is not already `relative`, `fixed`, or `absolute`.\r\n\t\tif (['relative, absolute, fixed'].indexOf(position) === -1) {\r\n\t\t\telement.style.position = 'relative';\r\n\t\t}\r\n\t\t// Add `overflow: hidden;` to element if `isCropped` is `true`.\r\n\t\tif (isCropped) {\r\n\t\t\telement.style.overflow = 'hidden';\r\n\t\t}\r\n\t\t// render speckles according to quantity.\r\n\t\tfor (var i = 1; i <= quantity; i++) {\r\n\t\t\t// Create speckle element according to the `tagName` option.\r\n\t\t\tconst speckle = document.createElement(tagName);\r\n\t\t\t// Set the index of this attribute as `data-speckle-index` \r\n\t\t\t// incase it needs to be accessed by other scripts.\r\n\t\t\tspeckle.setAttribute('data-speckle-index', i);\r\n\t\t\t// Get speckle styles.\r\n\t\t\tconst styles = this.getStyles(element);\r\n\t\t\t// loop over the speckle style object keys and apply the styles.\r\n\t\t\tif (styles && typeof styles === 'object') {\r\n\t\t\t\tfor (var styleKey in styles) {\r\n\t\t\t\t\tspeckle.style[styleKey] = styles[styleKey];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Add the custom attributes to the speckle.\r\n\t\t\tif (attributes && typeof attributes === 'object') {\r\n\t\t\t\tfor (var attributeKey in attributes) {\r\n\t\t\t\t\tspeckle.setAttribute(attributeKey, attributes[attributeKey]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Append the speckle to the container element.\r\n\t\t\telement.appendChild(speckle);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport default Speckle;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvc3BlY2tsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7SUFTTSxPOztBQUVMOzs7Ozs7OztBQVFBLGtCQUFZLE9BQVosRUFBcUIsT0FBckIsRUFBOEI7QUFBQTs7QUFDN0I7QUFDQSxNQUFJLENBQUUsT0FBRixJQUFhLEVBQUcsbUJBQW1CLE9BQXRCLENBQWpCLEVBQWlEO0FBQ2hELFFBQUssaUJBQUw7QUFDQTtBQUNEO0FBQ0EsT0FBSyxjQUFMLEdBQXNCO0FBQ3JCLGFBQVUsRUFEVyxFQUNQO0FBQ2QsWUFBUyxDQUZZLEVBRVQ7QUFDWixZQUFTLEVBSFksRUFHUjtBQUNiLGFBQVUsQ0FKVyxFQUlSO0FBQ2IsYUFBVSxDQUxXLEVBS1A7QUFDZCxlQUFZLElBTlMsRUFNSDtBQUNsQixlQUFZLElBUFMsRUFPSDtBQUNsQixZQUFTLEtBUlksRUFRTDtBQUNoQixVQUFPLEVBVGMsRUFTVjtBQUNYLFdBQVEsQ0FWYSxFQVVWO0FBQ1gsY0FBVyxLQVhVLEVBV0g7QUFDbEIsWUFBUyxHQVpZLEVBWVA7QUFDZCxlQUFZLElBYlMsQ0FhSjtBQWJJLEdBQXRCO0FBZUE7QUFDQSxPQUFLLE9BQUwsR0FBZSxLQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsS0FBSyxjQUFoQyxDQUFmO0FBdEI2QixpQkF1QjRDLEtBQUssT0F2QmpEO0FBQUEsTUF1QnJCLE9BdkJxQixZQXVCckIsT0F2QnFCO0FBQUEsTUF1QlosT0F2QlksWUF1QlosT0F2Qlk7QUFBQSxNQXVCSCxRQXZCRyxZQXVCSCxRQXZCRztBQUFBLE1BdUJPLFFBdkJQLFlBdUJPLFFBdkJQO0FBQUEsTUF1QmlCLFVBdkJqQixZQXVCaUIsVUF2QmpCO0FBQUEsTUF1QjZCLFVBdkI3QixZQXVCNkIsVUF2QjdCO0FBd0I3Qjs7QUFDQSxNQUFLLFVBQVUsQ0FBWCxJQUFrQixV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QU8sVUFBUCxPQUFzQixRQUF4QyxFQUFrRDtBQUNqRCxVQUFLLElBQUksWUFBVCxJQUF5QixVQUF6QixFQUFxQztBQUNwQyxjQUFRLFlBQVIsQ0FBcUIsWUFBckIsRUFBbUMsV0FBVyxZQUFYLENBQW5DO0FBQ0E7QUFDRDtBQUNEO0FBQ0EsWUFBUSxXQUFSLENBQW9CLE9BQXBCO0FBQ0E7QUFDRDs7Ozs7O2tCQUlhLE8iLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfXJldHVybiBlfSkoKSIsIi8qKlxyXG4gKiBTcGVja2xlLmpzXHJcbiAqXHJcbiAqIEEgSmF2YVNjcmlwdCBtb2R1bGUgdGhhdCBhZGRzIHJlc3BvbnNpdmUsIHN0eWxpemVkIFxyXG4gKiBzcGVja2xlcyB0byBhbnkgZWxlbWVudDsgd2l0aCBubyBkZXBlbmRlbmNpZXMuXHJcbiAqXHJcbiAqIEBwYWNrYWdlIHNwZWNrbGVcclxuICogQHNpbmNlICAgMC4wLjFcclxuICovXHJcbmNsYXNzIFNwZWNrbGUge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3Rvci5cclxuXHQgKlxyXG5cdCAqIEBzaW5jZSAgMC4wLjFcclxuXHQgKiBAcGFyYW0gIHtFbGVtZW50fSAgZWxlbWVudCAgVGhlIHBhc3NlZCBlbGVtZW50IHRvIHNwZWNrbGUuXHJcblx0ICogQHBhcmFtICB7b2JqfSAgICAgIG9wdGlvbnMgIFRoZSBvcHRpb25zIG9iamVjdC5cclxuXHQgKiBAcmV0dXJuIHt2b2lkfSBcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XHJcblx0XHQvLyB0aHJvdyBlcnJvciBpZiBgZWxlbWVudGAgaXMgbm90IGEgdmFsaWQgSFRNTCBlbGVtZW50LlxyXG5cdFx0aWYgKCEgZWxlbWVudCB8fCAhIChlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcclxuXHRcdFx0dGhpcy50aHJvd0VsZW1lbnRFcnJvcigpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gU2V0IHRoZSBkZWZhdWx0IG9wdGlvbnMuXHJcblx0XHR0aGlzLmRlZmF1bHRPcHRpb25zID0ge1xyXG5cdFx0XHRxdWFudGl0eTogNTYsIC8vIHF1YW50aXR5IG9mIHNwZWNrbGVzXHJcblx0XHRcdG1pblNpemU6IDQsIC8vIHNtYWxsZXN0IHNwZWNrbGUgKDErLCBsZXNzIHRoYW4gYG1heFNpemVgLCBweClcclxuXHRcdFx0bWF4U2l6ZTogNTYsIC8vIGxhcmdlc3Qgc3BlY2tsZSAoMSssIGdyZWF0ZXIgdGhhbiBgbWluU2l6ZWAsIHB4KVxyXG5cdFx0XHR0Yk9mZnNldDogOCwgLy8gdG9wL2JvdHRvbSBvZmZzZXQgKDArLCAlKVxyXG5cdFx0XHRsck9mZnNldDogOCwgIC8vIGxlZnQvcmlnaHQgb2Zmc2V0ICgwKywgJSlcclxuXHRcdFx0bWluT3BhY2l0eTogMTIuNSwgLy8gbWluaW11bSBvcGFjaXR5ICgxLTEwMClcclxuXHRcdFx0bWF4T3BhY2l0eTogODcuNSwgLy8gbWF4aW11bSBvcGFjaXR5ICgxLTEwMClcclxuXHRcdFx0aXNCb2tlaDogZmFsc2UsIC8vIGJva2VoIGVmZmVjdCAoYmx1ciBhcyBhIGZhY3RvciBvZiBkaXN0YW5jZSlcclxuXHRcdFx0Y29sb3I6ICcnLCAvLyBjb2xvciAoaGV4LCByZ2IsIGhzbCwga2V5d29yZCkuIElmIG5vbmUsIHRoZSBjb2xvcnMgd2lsbCBiZSByYW5kb21pemVkLlxyXG5cdFx0XHR6SW5kZXg6IDAsIC8vIHotaW5kZXggKGJva2VoOiB0aGUgc3RhcnRpbmcgei1pbmRleClcclxuXHRcdFx0aXNDcm9wcGVkOiBmYWxzZSwgLy8gYXBwbHkgYG92ZXJmbG93OiBoaWRkZW47YCB0byB0aGUgY29udGFpbmVyXHJcblx0XHRcdHRhZ05hbWU6ICdJJywgLy8gdGhlIFRhZyBOYW1lIHRoYXQgdGhlIHNwZWNrbGUgc2hvdWxkIGJlIHJlbmRlcmVkIGFzXHJcblx0XHRcdGF0dHJpYnV0ZXM6IG51bGwgLy8gYXR0cmlidXRlcyBvYmplY3QgYXMgYGtleTogdmFsdWVgIHBhaXJzXHJcblx0XHR9O1xyXG5cdFx0Ly8gUGFyc2UgYW5kIHNldCBvcHRpb25zLlxyXG5cdFx0dGhpcy5vcHRpb25zID0gdGhpcy5wYXJzZU9wdGlvbnMob3B0aW9ucywgdGhpcy5kZWZhdWx0T3B0aW9ucyk7XHJcblx0XHRjb25zdCB7IG1pblNpemUsIG1heFNpemUsIHRiT2Zmc2V0LCBsck9mZnNldCwgbWluT3BhY2l0eSwgbWF4T3BhY2l0eSB9ID0gdGhpcy5vcHRpb25zO1xyXG5cdFx0Ly8gdGhyb3cgZXJyb3IgaWYgYG1pblNpemVgIGlzIGxlc3MgdGhhbiAxLCBvciBncmVhdGVyIHRoYW4gYG1heFNpemVgLlxyXG5cdFx0aWYgKChtaW5TaXplIDwgMSkgfHwgKG1pblNpemUgPiBtYXhTaXplKSkge1xyXG5cdFx0XHR0aGlzLnRocm93T3B0aW9uc0Vycm9yKCdtaW5TaXplJyk7XHJcblx0XHR9XHJcblx0XHQvLyB0aHJvdyBlcnJvciBpZiBgbWF4U2l6ZWAgaXMgbGVzcyB0aGFuIDEsIG9yIGxlc3MgdGhhbiBgbWluU2l6ZWAuXHJcblx0XHRpZiAoKG1heFNpemUgPCAxKSB8fCAobWF4U2l6ZSA8IG1pblNpemUpKSB7XHJcblx0XHRcdHRoaXMudGhyb3dPcHRpb25zRXJyb3IoJ21heFNpemUnKTtcclxuXHRcdH1cclxuXHRcdC8vIHRocm93IGVycm9yIGlmIGB0Yk9mZnNldGAgaXMgbGVzcyB0aGFuIDAuXHJcblx0XHRpZiAodGJPZmZzZXQgPCAwKSB7XHJcblx0XHRcdHRoaXMudGhyb3dPcHRpb25zRXJyb3IoJ3RiT2Zmc2V0Jyk7XHJcblx0XHR9XHJcblx0XHQvLyB0aHJvdyBlcnJvciBpZiBgbHJPZmZzZXRgIGlzIGxlc3MgdGhhbiAwLlxyXG5cdFx0aWYgKGxyT2Zmc2V0IDwgMCkge1xyXG5cdFx0XHR0aGlzLnRocm93T3B0aW9uc0Vycm9yKCdsck9mZnNldCcpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gdGhyb3cgZXJyb3IgaWYgYG1pbk9wYWNpdHlgIGlzIGxlc3MgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiAxMDA7IG9yIGlmIGlzIGdyZWF0ZXIgdGhhbiBgbWF4T3BhY2l0eWAuXHJcblx0XHRpZiAoKG1pbk9wYWNpdHkgPCAwKSB8fCAobWluT3BhY2l0eSA+IDEwMCkgfHwgKG1pbk9wYWNpdHkgPiBtYXhPcGFjaXR5KSkge1xyXG5cdFx0XHR0aGlzLnRocm93T3B0aW9uc0Vycm9yKCdtaW5PcGFjaXR5Jyk7XHJcblx0XHR9XHJcblx0XHQvLyB0aHJvdyBlcnJvciBpZiBgbWF4T3BhY2l0eWAgaXMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIDEwMDsgb3IgaWYgaXMgbGVzcyB0aGFuIGBtaW5PcGFjaXR5YC5cclxuXHRcdGlmICgobWF4T3BhY2l0eSA8IDApIHx8IChtYXhPcGFjaXR5ID4gMTAwKSB8fCAobWF4T3BhY2l0eSA8IG1pbk9wYWNpdHkpKSB7XHJcblx0XHRcdHRoaXMudGhyb3dPcHRpb25zRXJyb3IoJ21heE9wYWNpdHknKTtcclxuXHRcdH1cclxuXHRcdC8vIFNldCB0aGUgZ2xvYmFsIHN0eWxlcy5cclxuXHRcdHRoaXMuZ2xvYmFsU3R5bGVzID0ge1xyXG5cdFx0XHRib3JkZXJSYWRpdXM6ICc1MCUnLCBcclxuXHRcdFx0ZGlzcGxheTogJ2Jsb2NrJywgXHJcblx0XHRcdHBvaW50ZXJFdmVudHM6ICdub25lJywgXHJcblx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBcclxuXHRcdH07XHJcblx0XHQvLyBTZXQgdGhlIHVwZ3JhZGVkIGNsYXNzLlxyXG5cdFx0dGhpcy51cGdyYWRlZENsYXNzID0gJ3NwZWNrbGUtLXVwZ3JhZGVkJztcclxuXHRcdC8vIFJlbmRlciBzcGVja2xlcy5cclxuXHRcdHRoaXMucmVuZGVyKGVsZW1lbnQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2UgdGhlIHBhc3NlZCBvcHRpb25zIGFnYWluc3QgdGhlIGRlZmF1bHRzLlxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSAge29ian0gIG9wdGlvbnMgICAgICAgICBUaGUgcGFzc2VkIGluIHVzZXIgb3B0aW9ucyBvYmplY3QuXHJcblx0ICogQHBhcmFtICB7b2JqfSAgZGVmYXVsdE9wdGlvbnMgIFRoZSBkZWZhdWx0IG9wdGlvbnMgb2JqZWN0LlxyXG5cdCAqIEByZXR1cm4ge29ian0gICAgICAgICAgICAgICAgICBUaGUgcGFyc2VkIG9wdGlvbnMgb2JqZWN0LlxyXG5cdCAqL1xyXG5cdHBhcnNlT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0T3B0aW9ucykge1xyXG5cdFx0Ly8gaWYgbm8gb3B0aW9ucyBhcmUgcGFzc2VkLCBqdXN0IHJldHVybiB0aGUgZGVmYXVsdCBvcHRpb25zLlxyXG5cdFx0aWYgKCEgb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRPcHRpb25zO1xyXG5cdFx0fVxyXG5cdFx0Ly8gaW5pdCBlbXB0eSBgcGFyc2VkT3B0aW9uc2Agb2JqZWN0LlxyXG5cdFx0dmFyIHBhcnNlZE9wdGlvbnMgPSB7fTtcclxuXHRcdC8vIGxvb3AgZGVmYXVsdCBvcHRpb24ga2V5cyBhbmQgcGFyc2UuIElmIHRoZSBvcHRpb25zIFxyXG5cdFx0Ly8gb2JqZWN0IGhhcyB0aGlzIGtleSwgdXNlIGl0OyBlbHNlLCB1c2UgdGhlIGRlZmF1bHQgb3B0aW9uLlxyXG5cdFx0Zm9yICh2YXIga2V5IGluIGRlZmF1bHRPcHRpb25zKSB7XHJcblx0XHRcdGNvbnN0IHZhbHVlID0gb3B0aW9uc1trZXldO1xyXG5cdFx0XHQvLyBJZiB0aGUgdmFsdWUgaXMgYSBudW1iZXIsIHNldCBpdCBubyBtYXR0ZXIgd2hhdC5cclxuXHRcdFx0Ly8gVGhpcyBwcmV2ZW50cyBpc3N1ZXMgd2hlcmUgcGFzc2luZyBgMGAgaXMgcmVhZCBhcyBcclxuXHRcdFx0Ly8gbm8gb3B0aW9uIHBhc3NlZCwgcmVuZGVyaW5nIHRoZSBkZWZhdWx0IGluc3RlYWQuXHJcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcblx0XHRcdFx0cGFyc2VkT3B0aW9uc1trZXldID0gdmFsdWU7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cGFyc2VkT3B0aW9uc1trZXldID0gdmFsdWUgfHwgZGVmYXVsdE9wdGlvbnNba2V5XTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gcmV0dXJuIHRoZSBwYXJzZWQgb3B0aW9ucy5cclxuXHRcdHJldHVybiBwYXJzZWRPcHRpb25zO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRocm93IGFuIGVsZW1lbnQgZXJyb3IuXHJcblx0ICogXHJcblx0ICogQHNpbmNlICAwLjAuMVxyXG5cdCAqIEByZXR1cm4ge0Vycm9yfSAgVGhlIGZvcm1hdHRlZCBlbGVtZW50IGVycm9yLlxyXG5cdCAqL1xyXG5cdHRocm93RWxlbWVudEVycm9yKCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFxyXG5cdFx0XHQnU3BlY2tsZS5qc1xcbicgKyBcclxuXHRcdFx0J0EgdmFsaWQgSFRNTCBFbGVtZW50IG11c3QgYmUgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQuJ1xyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRocm93IGFuIGVsZW1lbnQgZXJyb3IuXHJcblx0ICogXHJcblx0ICogQHNpbmNlICAwLjAuMVxyXG5cdCAqIEByZXR1cm4ge0Vycm9yfSAgVGhlIGZvcm1hdHRlZCBlbGVtZW50IGVycm9yLlxyXG5cdCAqL1xyXG5cdHRocm93T3B0aW9uc0Vycm9yKGtleSkge1xyXG5cdFx0dmFyIG1lc3NhZ2UgPSAnJztcclxuXHRcdGlmIChrZXkgPT09ICdtaW5TaXplJykge1xyXG5cdFx0XHRtZXNzYWdlID0gJ1RoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBhbmQgbGVzcyB0aGFuIGBtYXhTaXplYC4nO1xyXG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdtYXhTaXplJykge1xyXG5cdFx0XHRtZXNzYWdlID0gJ1RoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBhbmQgZ3JlYXRlciB0aGFuIGBtaW5TaXplYC4nO1xyXG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICd0Yk9mZnNldCcpIHtcclxuXHRcdFx0bWVzc2FnZSA9ICdUaGUgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nO1xyXG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdsck9mZnNldCcpIHtcclxuXHRcdFx0bWVzc2FnZSA9ICdUaGUgdmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nO1xyXG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdtaW5PcGFjaXR5Jykge1xyXG5cdFx0XHRtZXNzYWdlID0gJ1RoZSB2YWx1ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAwLCBhbmQgbGVzcyB0aGFuIGBtYXhPcGFjaXR5YC4nO1xyXG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdtYXhPcGFjaXR5Jykge1xyXG5cdFx0XHRtZXNzYWdlID0gJ1RoZSB2YWx1ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAwLCBhbmQgZ3JlYXRlciB0aGFuIGBtaW5PcGFjaXR5YC4nO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFxyXG5cdFx0XHQnU3BlY2tsZS5qcyBbJyArIGtleSArICddXFxuJyArIG1lc3NhZ2VcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIGEgcGFzc2VkIG1pbmltdW0gYW5kIG1heGltdW0uXHJcblx0ICogXHJcblx0ICogQHNpbmNlICAwLjAuMVxyXG5cdCAqIEBwYXJhbSAge2ludH0gIG1pbiAgVGhlIG1pbmltdW0gZm9yIHRoZSByZXR1cm5lZCBpbnRlZ2VyLlxyXG5cdCAqIEBwYXJhbSAge2ludH0gIG1heCAgVGhlIG1heGltdW0gZm9yIHRoZSByZXR1cm5lZCBpbnRlZ2VyLlxyXG5cdCAqIEByZXR1cm4ge2ludH0gICAgICAgVGhlIHJhbmRvbWl6ZWQgaW50ZWdlci5cclxuXHQgKi9cclxuXHRnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcclxuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoKG1heCAtIG1pbikgKyAxKSArIG1pbik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgYSByYW5kb20gaGV4IGNvbG9yLlxyXG5cdCAqIFxyXG5cdCAqIEBzaW5jZSAgMC4wLjFcclxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9ICBBIHJhbmRvbSBoZXggY29sb3IuXHJcblx0ICovXHJcblx0Z2V0UmFuZG9tSGV4KCkge1xyXG5cdFx0cmV0dXJuICcjJyArICgnMDAwMDAwJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnNsaWNlKDIsIDgpKS5zbGljZSgtNikudG9VcHBlckNhc2UoKTtcclxuXHR9XHJcblxyXG5cdGdldFN0eWxlcyhlbGVtZW50KSB7XHJcblx0XHRjb25zdCB7IG1pblNpemUsIG1heFNpemUsIHRiT2Zmc2V0LCBsck9mZnNldCwgbWluT3BhY2l0eSwgbWF4T3BhY2l0eSwgY29sb3IsIGlzQm9rZWgsIHpJbmRleCB9ID0gdGhpcy5vcHRpb25zO1xyXG5cdFx0Ly8gc2l6ZVxyXG5cdFx0Y29uc3Qgc2l6ZSA9IHRoaXMuZ2V0UmFuZG9tSW50KG1pblNpemUsIG1heFNpemUpO1xyXG5cdFx0Y29uc3QgY2VudGVyID0gKHNpemUgLyAyKTtcclxuXHRcdC8vIGNvbG9yXHJcblx0XHRjb25zdCByZW5kZXJDb2xvciA9IGNvbG9yIHx8IHRoaXMuZ2V0UmFuZG9tSGV4KCk7XHJcblx0XHQvLyBDcmVhdGUgdGhlIHN0eWxlcyBvYmplY3QuXHJcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLmdsb2JhbFN0eWxlcywge1xyXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IHJlbmRlckNvbG9yLCBcclxuXHRcdFx0Ym94U2hhZG93OiBpc0Jva2VoID8gKCcwIDAgJyArIChzaXplIC8gMykgKyAncHggJyArIChzaXplIC8gMykgKyAncHggJyArIHJlbmRlckNvbG9yKSA6ICcnLCBcclxuXHRcdFx0aGVpZ2h0OiBzaXplICsgJ3B4JywgXHJcblx0XHRcdGxlZnQ6ICdjYWxjKCcgKyB0aGlzLmdldFJhbmRvbUludCgwIC0gbHJPZmZzZXQsIDEwMCArIGxyT2Zmc2V0KSArICclIC0gJyArIGNlbnRlciArICdweCknLCBcclxuXHRcdFx0b3BhY2l0eTogKHRoaXMuZ2V0UmFuZG9tSW50KG1pbk9wYWNpdHksIG1heE9wYWNpdHkpICogMC4wMSksIFxyXG5cdFx0XHR0b3A6ICdjYWxjKCcgKyB0aGlzLmdldFJhbmRvbUludCgwIC0gdGJPZmZzZXQsIDEwMCArIHRiT2Zmc2V0KSArICclIC0gJyArIGNlbnRlciArICdweCknLCBcclxuXHRcdFx0d2lkdGg6IHNpemUgKyAncHgnLCBcclxuXHRcdFx0ekluZGV4OiB6SW5kZXgsIFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZW5kZXIgdGhlIHNwZWNrbGVzLlxyXG5cdCAqIFxyXG5cdCAqIEBzaW5jZSAgMC4wLjFcclxuXHQgKiBAcGFyYW0gIHtFbGVtZW50fSAgZWxlbWVudCAgVGhlIGNvbnRhaW5lciBlbGVtZW50IHRvIHNwZWNrbGUuXHJcblx0ICogQHJldHVybiB7dm9pZH0gXHJcblx0ICovXHJcblx0cmVuZGVyKGVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IHsgcXVhbnRpdHksIGlzQ3JvcHBlZCwgdGFnTmFtZSwgYXR0cmlidXRlcyB9ID0gdGhpcy5vcHRpb25zO1xyXG5cdFx0Y29uc3QgeyBwb3NpdGlvbiB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XHJcblx0XHQvLyBhZGQgdGhlIHVwZ3JhZGVkIGNsYXNzLlxyXG5cdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMudXBncmFkZWRDbGFzcyk7XHJcblx0XHQvLyBhZGQgcmVsYXRpdmUgcG9zaXRpb25pbmcgdG8gdGhlIGVsZW1lbnQgaWYgaXQgXHJcblx0XHQvLyBpcyBub3QgYWxyZWFkeSBgcmVsYXRpdmVgLCBgZml4ZWRgLCBvciBgYWJzb2x1dGVgLlxyXG5cdFx0aWYgKFsncmVsYXRpdmUsIGFic29sdXRlLCBmaXhlZCddLmluZGV4T2YocG9zaXRpb24pID09PSAtMSkge1xyXG5cdFx0XHRlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHRcdH1cclxuXHRcdC8vIEFkZCBgb3ZlcmZsb3c6IGhpZGRlbjtgIHRvIGVsZW1lbnQgaWYgYGlzQ3JvcHBlZGAgaXMgYHRydWVgLlxyXG5cdFx0aWYgKGlzQ3JvcHBlZCkge1xyXG5cdFx0XHRlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblx0XHR9XHJcblx0XHQvLyByZW5kZXIgc3BlY2tsZXMgYWNjb3JkaW5nIHRvIHF1YW50aXR5LlxyXG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gcXVhbnRpdHk7IGkrKykge1xyXG5cdFx0XHQvLyBDcmVhdGUgc3BlY2tsZSBlbGVtZW50IGFjY29yZGluZyB0byB0aGUgYHRhZ05hbWVgIG9wdGlvbi5cclxuXHRcdFx0Y29uc3Qgc3BlY2tsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcblx0XHRcdC8vIFNldCB0aGUgaW5kZXggb2YgdGhpcyBhdHRyaWJ1dGUgYXMgYGRhdGEtc3BlY2tsZS1pbmRleGAgXHJcblx0XHRcdC8vIGluY2FzZSBpdCBuZWVkcyB0byBiZSBhY2Nlc3NlZCBieSBvdGhlciBzY3JpcHRzLlxyXG5cdFx0XHRzcGVja2xlLnNldEF0dHJpYnV0ZSgnZGF0YS1zcGVja2xlLWluZGV4JywgaSk7XHJcblx0XHRcdC8vIEdldCBzcGVja2xlIHN0eWxlcy5cclxuXHRcdFx0Y29uc3Qgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoZWxlbWVudCk7XHJcblx0XHRcdC8vIGxvb3Agb3ZlciB0aGUgc3BlY2tsZSBzdHlsZSBvYmplY3Qga2V5cyBhbmQgYXBwbHkgdGhlIHN0eWxlcy5cclxuXHRcdFx0aWYgKHN0eWxlcyAmJiB0eXBlb2Ygc3R5bGVzID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdGZvciAodmFyIHN0eWxlS2V5IGluIHN0eWxlcykge1xyXG5cdFx0XHRcdFx0c3BlY2tsZS5zdHlsZVtzdHlsZUtleV0gPSBzdHlsZXNbc3R5bGVLZXldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBBZGQgdGhlIGN1c3RvbSBhdHRyaWJ1dGVzIHRvIHRoZSBzcGVja2xlLlxyXG5cdFx0XHRpZiAoYXR0cmlidXRlcyAmJiB0eXBlb2YgYXR0cmlidXRlcyA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVLZXkgaW4gYXR0cmlidXRlcykge1xyXG5cdFx0XHRcdFx0c3BlY2tsZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlS2V5LCBhdHRyaWJ1dGVzW2F0dHJpYnV0ZUtleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBBcHBlbmQgdGhlIHNwZWNrbGUgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50LlxyXG5cdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHNwZWNrbGUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNwZWNrbGU7Il19"}