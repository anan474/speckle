{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/speckle.js"],"names":[],"mappings":"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","file":"speckle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","/**\r\n * Speckle.js\r\n *\r\n * A JavaScript module that adds responsive, stylized \r\n * speckles to any element; with no dependencies.\r\n *\r\n * @package speckle\r\n * @since   0.0.1\r\n */\r\nclass Speckle {\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The passed element to speckle.\r\n\t * @param  {obj}      options  The options object.\r\n\t * @return {void} \r\n\t */\r\n\tconstructor(element, options) {\r\n\t\t// throw error if `element` is not a valid HTML element.\r\n\t\tif (! element || ! (element instanceof Element)) {\r\n\t\t\tthis.throwElementError();\r\n\t\t}\r\n\t\t// Set the default options.\r\n\t\tthis.defaultOptions = {\r\n\t\t\tquantity: 56, // quantity of speckles\r\n\t\t\tminSize: 4, // smallest speckle (1+, less than `maxSize`, px)\r\n\t\t\tmaxSize: 56, // largest speckle (1+, greater than `minSize`, px)\r\n\t\t\ttbOffset: 8, // top/bottom offset (0+, %)\r\n\t\t\tlrOffset: 8,  // left/right offset (0+, %)\r\n\t\t\tminOpacity: 12.5, // minimum opacity (1-100)\r\n\t\t\tmaxOpacity: 87.5, // maximum opacity (1-100)\r\n\t\t\tisBokeh: false, // bokeh effect (blur as a factor of distance)\r\n\t\t\tcolor: '', // color (hex, rgb, hsl, keyword). If none, the colors will be randomized.\r\n\t\t\tzIndex: 0, // z-index (bokeh: the starting z-index)\r\n\t\t\tisCropped: false, // apply `overflow: hidden;` to the container\r\n\t\t\ttagName: 'I', // the Tag Name that the speckle should be rendered as\r\n\t\t\tattributes: null // attributes object as `key: value` pairs\r\n\t\t};\r\n\t\t// Parse and set options.\r\n\t\tthis.options = this.parseOptions(options, this.defaultOptions);\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity } = this.options;\r\n\t\t// throw error if `minSize` is less than 1, or greater than `maxSize`.\r\n\t\tif ((minSize < 1) || (minSize > maxSize)) {\r\n\t\t\tthis.throwOptionsError('minSize');\r\n\t\t}\r\n\t\t// throw error if `maxSize` is less than 1, or less than `minSize`.\r\n\t\tif ((maxSize < 1) || (maxSize < minSize)) {\r\n\t\t\tthis.throwOptionsError('maxSize');\r\n\t\t}\r\n\t\t// throw error if `tbOffset` is less than 0.\r\n\t\tif (tbOffset < 0) {\r\n\t\t\tthis.throwOptionsError('tbOffset');\r\n\t\t}\r\n\t\t// throw error if `lrOffset` is less than 0.\r\n\t\tif (lrOffset < 0) {\r\n\t\t\tthis.throwOptionsError('lrOffset');\r\n\t\t}\r\n\t\t// throw error if `minOpacity` is less than 0 or greater than 100; or if is greater than `maxOpacity`.\r\n\t\tif ((minOpacity < 0) || (minOpacity > 100) || (minOpacity > maxOpacity)) {\r\n\t\t\tthis.throwOptionsError('minOpacity');\r\n\t\t}\r\n\t\t// throw error if `maxOpacity` is less than 0 or greater than 100; or if is less than `minOpacity`.\r\n\t\tif ((maxOpacity < 0) || (maxOpacity > 100) || (maxOpacity < minOpacity)) {\r\n\t\t\tthis.throwOptionsError('maxOpacity');\r\n\t\t}\r\n\t\t// Set the global styles.\r\n\t\tthis.globalStyles = {\r\n\t\t\tborderRadius: '50%', \r\n\t\t\tdisplay: 'block', \r\n\t\t\tpointerEvents: 'none', \r\n\t\t\tposition: 'absolute', \r\n\t\t};\r\n\t\t// Set the upgraded class.\r\n\t\tthis.upgradedClass = 'speckle--upgraded';\r\n\t\t// Render speckles.\r\n\t\tthis.render(element);\r\n\t}\r\n\r\n\t/**\r\n\t * Parse the passed options against the defaults.\r\n\t * \r\n\t * @param  {obj}  options         The passed in user options object.\r\n\t * @param  {obj}  defaultOptions  The default options object.\r\n\t * @return {obj}                  The parsed options object.\r\n\t */\r\n\tparseOptions(options, defaultOptions) {\r\n\t\t// if no options are passed, just return the default options.\r\n\t\tif (! options || typeof options !== 'object') {\r\n\t\t\treturn defaultOptions;\r\n\t\t}\r\n\t\t// init empty `parsedOptions` object.\r\n\t\tvar parsedOptions = {};\r\n\t\t// loop default option keys and parse. If the options \r\n\t\t// object has this key, use it; else, use the default option.\r\n\t\tfor (var key in defaultOptions) {\r\n\t\t\tconst value = options[key];\r\n\t\t\t// If the value is a number, set it no matter what.\r\n\t\t\t// This prevents issues where passing `0` is read as \r\n\t\t\t// no option passed, rendering the default instead.\r\n\t\t\tif (typeof value === 'number') {\r\n\t\t\t\tparsedOptions[key] = value;\r\n\t\t\t} else {\r\n\t\t\t\tparsedOptions[key] = value || defaultOptions[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// return the parsed options.\r\n\t\treturn parsedOptions;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowElementError() {\r\n\t\tthrow new Error(\r\n\t\t\t'Speckle.js\\n' + \r\n\t\t\t'A valid HTML Element must be passed to the constructor as the first argument.'\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Throw an element error.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {Error}  The formatted element error.\r\n\t */\r\n\tthrowOptionsError(key) {\r\n\t\tvar message = '';\r\n\t\tif (key === 'minSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and less than `maxSize`.';\r\n\t\t} else if (key === 'maxSize') {\r\n\t\t\tmessage = 'The value must be greater than or equal to 1, and greater than `minSize`.';\r\n\t\t} else if (key === 'tbOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'lrOffset') {\r\n\t\t\tmessage = 'The value must be greater than 0.';\r\n\t\t} else if (key === 'minOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and less than `maxOpacity`.';\r\n\t\t} else if (key === 'maxOpacity') {\r\n\t\t\tmessage = 'The value must be between 1 and 100, and greater than `minOpacity`.';\r\n\t\t}\r\n\t\tthrow new Error(\r\n\t\t\t`Speckle.js [${key}]\\n` + message\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random integer between a passed minimum and maximum.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {int}  min  The minimum for the returned integer.\r\n\t * @param  {int}  max  The maximum for the returned integer.\r\n\t * @return {int}       The randomized integer.\r\n\t */\r\n\tgetRandomInt(min, max) {\r\n\t\treturn Math.floor(Math.random() * ((max - min) + 1) + min);\r\n\t}\r\n\r\n\t/**\r\n\t * Get a random hex color.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @return {string}  A random hex color.\r\n\t */\r\n\tgetRandomHex() {\r\n\t\treturn `#${('000000' + Math.random().toString(16).slice(2, 8)).slice(-6).toUpperCase()}`;\r\n\t}\r\n\r\n\tgetStyles(element) {\r\n\t\tconst { minSize, maxSize, tbOffset, lrOffset, minOpacity, maxOpacity, color, isBokeh, zIndex } = this.options;\r\n\t\t// size\r\n\t\tconst size = this.getRandomInt(minSize, maxSize);\r\n\t\tconst center = (size / 2);\r\n\t\t// color\r\n\t\tconst renderColor = color || this.getRandomHex();\r\n\t\t// Create the styles object.\r\n\t\treturn Object.assign(this.globalStyles, {\r\n\t\t\tbackgroundColor: renderColor, \r\n\t\t\tboxShadow: isBokeh ? `0 0 ${(size / 3)}px ${(size / 3)}px ${renderColor}` : '', \r\n\t\t\theight: `${size}px`, \r\n\t\t\tleft: `calc(${this.getRandomInt(0 - lrOffset, 100 + lrOffset)}% - ${center}px)`, \r\n\t\t\topacity: (this.getRandomInt(minOpacity, maxOpacity) * 0.01), \r\n\t\t\ttop: `calc(${this.getRandomInt(0 - tbOffset, 100 + tbOffset)}% - ${center}px)`, \r\n\t\t\twidth: `${size}px`, \r\n\t\t\tzIndex: zIndex, \r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Render the speckles.\r\n\t * \r\n\t * @since  0.0.1\r\n\t * @param  {Element}  element  The container element to speckle.\r\n\t * @return {void} \r\n\t */\r\n\trender(element) {\r\n\t\tconst { quantity, isCropped, tagName, attributes } = this.options;\r\n\t\tconst { position } = window.getComputedStyle(element);\r\n\t\t// add the upgraded class.\r\n\t\telement.classList.add(this.upgradedClass);\r\n\t\t// add relative positioning to the element if it \r\n\t\t// is not already `relative`, `fixed`, or `absolute`.\r\n\t\tif (['relative, absolute, fixed'].indexOf(position) === -1) {\r\n\t\t\telement.style.position = 'relative';\r\n\t\t}\r\n\t\t// Add `overflow: hidden;` to element if `isCropped` is `true`.\r\n\t\tif (isCropped) {\r\n\t\t\telement.style.overflow = 'hidden';\r\n\t\t}\r\n\t\t// render speckles according to quantity.\r\n\t\tfor (var i = 1; i <= quantity; i++) {\r\n\t\t\t// Create speckle element according to the `tagName` option.\r\n\t\t\tconst speckle = document.createElement(tagName);\r\n\t\t\t// Set the index of this attribute as `data-speckle-index` \r\n\t\t\t// incase it needs to be accessed by other scripts.\r\n\t\t\tspeckle.setAttribute('data-speckle-index', i);\r\n\t\t\t// Get speckle styles.\r\n\t\t\tconst styles = this.getStyles(element);\r\n\t\t\t// loop over the speckle style object keys and apply the styles.\r\n\t\t\tif (styles && typeof styles === 'object') {\r\n\t\t\t\tfor (var styleKey in styles) {\r\n\t\t\t\t\tspeckle.style[styleKey] = styles[styleKey];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Add the custom attributes to the speckle.\r\n\t\t\tif (attributes && typeof attributes === 'object') {\r\n\t\t\t\tfor (var attributeKey in attributes) {\r\n\t\t\t\t\tspeckle.setAttribute(attributeKey, attributes[attributeKey]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Append the speckle to the container element.\r\n\t\t\telement.appendChild(speckle);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport default Speckle;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}